1000 // 00: znxr c [loadi] reg[1]={data}
1234 // 01: {data}
2000 // 02: znxr c [loadi] reg[2]={data}
0001 // 03: {data}
12a0 // 04: znxr c [add] regs[1]+=regs[2]
12a0 // 05: znxr c [add] regs[1]+=regs[2]
1000 // 06: znxr c [loadi] reg[1]={data}
0004 // 07: {data}
12c0 // 08: znxr c [shift] reg[1]>>=2
1ec0 // 09: znxr c [shift] reg[1]<<=2
10c0 // 10: znxr c [not] reg[1]=~reg[1]
1000 // 11: znxr c [loadi] reg[1]={data}
0003 // 12: {data}
2000 // 13: znxr c [loadi] reg[2]={data}
0004 // 14: {data}
12e0 // 15: znxr c [store] ram[%2]=%1 (ram[4]=3)
1000 // 16: znxr c [loadi] reg[2]={data}
0004 // 17: {data}
21e0 // 18: znxr c [store] ram[%1]=%2 (ram[4]=4)
3160 // 19: znxr c [load] %3=ram[%1] (reg[3]=ram[4] => reg[3]==4)
0220 // 20: znxr c [skip] 2 instructions
ffff // 21: 
ffff // 22: 
4160 // 23: znxr c [load] %4=ram[%1] (reg[4]=ram[4] => reg[4]==4)
0090 // 24: znxr C [call] 32 => encoded (32>>2)|1==9
6040 // 25: znxr c [loop] %6 (reg[6]==4)
6284 // 26: znXr c [addi & next] reg[6]+=2
5000 // 27: znxr c [load] %5=1
0001 // 28: {data 1}
5f80 // 29: znxr c [addi] %5-=1
0322 // 30: zNxr c [skip] 4 instructions
0221 // 31: Znxr c [skip] 3 instructions
5160 // 32: znxr c [load] %5=ram[%1] (reg[5]=ram[4] => reg[5]==4)
6168 // 33: znxR c [load & return] %6=ram[%1] (reg[6]=ram[4] => reg[6]==4)
0000 // 34: 
5f80 // 35: znxr c [addi] %5-=1
0122 // 36: zNxr c [skip] 2
0000 // 37: 
5280 // 38: znxr c [addi] %5+=2
0123 // 39: ZNxr c [skip] 2
0000 // 40: 
7000 // 41: znxr c [load] %7=-1
ffff // 42: {data -1} 
0000 // 43:
0000 // 44:
0000 // 45:
0000 // 46:
