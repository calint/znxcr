1058 // 00: loadi r1
1234 // 01: 0x1234
2058 // 02: loadi r2
0001 // 03: 0x0001
12a3 // 04: add r1 r2
12a3 // 05: add r1 r2
1058 // 06: loadi r1
0004 // 07: 0x0004
12c3 // 08: shift r1 2
1ec3 // 09: shift r1 -2
10c3 // 10: not r1
1058 // 11: loadi r1
0003 // 12: 0x003
2058 // 13: loadi r2
0004 // 14: 0x004
12e3 // 15: store r2 r1 ; ram[4] => 3
1058 // 16: loadi r2
0004 // 17: 0x004
21e3 // 18: store r1 r2 ; ram[4] => 4
3163 // 19: load r3 r1  ; ram[4] => 4
023b // 20: skip 2
ffff // 21: 
ffff // 22: 
4163 // 23: load r4 r1 ; r4=ram[4] => 4
0093 // 24: call 32 ; encoded (32>>2)|1 => 0x9
6018 // 25: loop r6 ; r6 => 4
6287 // 26: addi r6 2 next
5058 // 27: loadi r5
0001 // 28: 0x0001
5f83 // 29: addi r5 -1
033a // 30: ifn skip 3
0339 // 31: ifz skip 3
5163 // 32: load r5 r1 ; ram[4] => 4
616b // 33: load r6 r1 return ; ram[4] => 4
0000 // 34: 
5f83 // 35: addi r5 -1
013a // 36: ifn skip 1
0000 // 37: 
5283 // 38: addi r5 2
0238 // 39: ifp skip 2
0000 // 40:
0000 // 41: 
7058 // 42: loadi r7
ffff // 43: 0xffff 
8741 // 44: ifz copy r7 r5
8742 // 45: ifn copy r7 r8
00d3 // 46: call 48 ; encoded (48>>2)|1 => 0xd
063b // 47: skip 6
1058 // 48: loadi r1
0002 // 49: 0x002
1018 // 50: loopi r1
1f8f // 51: addi r1 -1 next return
1058 // 52: loadi r1
0003 // 53: 0x003
2058 // 54: loadi r2
0001 // 55: 0x001
3058 // 56: loadi r3
0002 // 57: 0x002
3223 // 58: sub r2 r3

